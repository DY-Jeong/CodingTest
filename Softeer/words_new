직무상세


Python/C 프로그래밍 가능자
운전면허 소지자
컴퓨터 비전/영상인식 관련 전공자
3D 인식 네트워크 개발 경험자
인공지능 또는 영상인식 관련 프로젝트 경험자
Vision Geometry 기술 개발 경험자
Optical Flow 기반 영상 분석 기술 개발 경험자
딥러닝 네트워크 변환/포팅/PTQ/QAT 경험자

[전방영상 객체인식 로직개발]
딥러닝 네트워크 설계  
- 임베디드 환경에서 동작 가능한 네트워크 구조 설계
- 네트워크 임베디드 포팅 및 최적화
- 네트워크 학습/평가 데이터셋 구축 및 관리
인식 후처리 로직 개발
- 객체 추적, association, 주행환경 분석 로직 설계
- 객체 거리/상대속도 등 물리정보 추정 로직 설계 
- 임베디드 포팅 및 복잡도 최적화
임베디드 포팅
- 임베디드 SW 구조 설계
- 임베디드 플랫폼 구동 검증


전방영상 객체인식 로직 개발 직무에 대한 이해를 구체적으로 기술
전방영상 객체인식 로직 개발 직무에 대해 내가 적합하다고 판단할 수 있는 근거를
사례+경험을 바탕으로 기재

전방영상 객체인식이 필요한 이유
최근 트렌드 -> 센서퓨전보다 카메라ONLY+E2E
객체의 종류에 따른 제어가 가능
컴퓨팅 성능의 제약이 있다면 E2E보다 감지 모델의 정확도를 높이는 것이 평균 성능 향상에 좋음
E2E또한 전처리되어있으며 정보를 추출하기에 적합한 적은 용량의 이미지가 있다면 E2E학습에 더욱 빠른 학습 및 추론을 기대할 수 있음
카메라의 특장점으로 광학 구성에 따라 주변 상황을 인지하기가 용이함. 
  - 카메라의 경우 정차된 차량을 인식 가능함. 이는 거리뿐 아니라 이미지는 형태/색상 정보를 포함하고 있기 때문
  - 물체의 분류가 용이하기 때문에 대응이 원활함
  - 다만 더 많은 정보를 검출하기 위한 경우 더 고해상도의 센서 및 고성능 SoC가 필요함
대신 카메라 센서를 사용할 경우 고성능 SoC가 필요

딥러닝 네트워크 설계 방안
 - SoC에 적합한 입력이 가능한 모델 구상 및 DSP 활용 가능한 모델 구현
 - 네트워크 학습/평가 데이터셋 구축 및 관리 -> Labelme 서버를 운용한 경험을 표현하면 좋을 듯.
인식 후처리 로직 개발
 - 객체 추적, association, 주행환경 분석 로직 설계 -> 잘 모르는 분야
 - 객체 거리/상대속도 등 물리 정보 추정 로직 ->
    -> 차량의 상대 크기+차속+객체 크기에 따라 쉽게 연산 가능, 두개 이상의 카메라 있을 시 더욱 정확하게 추정 가능
 - 임베디드 포팅 및 복잡도 최적화 
    ->모델 경량화, 감지용 모델, 추적용 모델을 개별로 적용도 가능
임베디드 포팅
 - 임베디드 SW 구조 설계
     -> 실시간성, 신뢰성, 보안안정성이 중요. ASIL-D의 클러스터 플랫폼 로직 개발에 대한 내용 추가하면 좋을 듯.

전방영상 객체인식은 차량, 보행자 및 이륜차, 표지판, 광원의 종류 등을 정확히 인식하고 객체의 위치 및 상대속도를 추정하여 주행보조 및 자율주행 기능에 활용할 수 있는 중요한 분야입니다. 이러한 기능을 구현하기 위해서 기본적인 이미지 전, 후처리를 비롯하여 딥러닝 네트워크 설계, 임베디드 SoC의 구성 이해 및 SW설계, 성능 검증과 데이터셋 구축, 관리에 대한 충분한 이해와 이를 수행할 수 있는 역량이 필요합니다.
저는 석사과정에서 자율 화재 초동 진압 체계 연구를 수행하며 객체의 3차원 위치를 추정하는 영상인식 로직을 개발했습니다. 다중 카메라 교정, 3D 좌표 추정, YOLOv4 기반 화재 감지 모델의 학습 및 검증을 수행했고, Raspberry Pi 4 환경에 딥러닝 모델을 경량화해 포팅하며 임베디드 실시간 구동까지 검증했습니다. 이를 통해 데이터셋 제작·모델 최적화·임베디드 적용에 필요한 실질적인 능력을 확보했습니다. 또한 P&ID 도면 자동인식 연구에서는 OCR과 딥러닝을 결합해 객체(기호, 문자)를 인식하고 연결 관계를 추출하는 소프트웨어를 Python으로 구현했습니다. 이 과정에서 영상 내 다양한 요소를 분류·추적하는 로직 설계 경험을 쌓을 수 있었습니다.
현재 직무에서는 클러스터의 사운드 및 Safety/비 Safety 관련 경고등 로직 개발을 담당하며 ISO26262기반 SW 설계능력을 가지고 있습니다. 또한 시스템 MCU 프로그래밍 툴 개발을 수행하며 차량용 임베디드 SW의 구조에 대한 이해를 가지고 있으며 Rust를 AUTOSAR Classic 환경에 적용하는 선행 개발을 통해 임베디드 SW 품질 개선 가능성을 연구한 바 있습니다.
저는 위와 같이 딥러닝 네트워크 학습 및 포팅, 영상인식 기반 로직 개발 경험을 보유하고 있으며 차량용 SW 개발 경험을 통해 개발된 SW를 차량 시스템에 적합하게 구현할 수 있는 역량이 있습니다. 

1. 콘티넨탈오토모티브일렉트로닉스 재직 중 경험 및 경력
  1). 4인치 클러스터 플랫폼 개발
  - 고객 사양에 따른 4인치 클러스터에 필요한 사운드 로직 개발(C/C++) 및 디버깅, 사운드 평가 대응.
  - ISO26262 표준 준수를 위한 Module Specification, Test Specification, Code 구현 및 검증
  - MiniProg4를 이용한 Traveo T2G 임베디드 MCU 플랫폼 프로그래밍/업데이트 SW 개발(Python, OpenOCD)
  - 컴파일러 경고 및 Google test, LLM을 이용한 SW 품질 개선 방안 시스템 개발
  2). AR HUD 선행 SW 로직 개발
   - 운전자 감지 RGB센서 및 객체 인식 카메라 기반 AR HUD 시스템 선행 개발
   - PnP 로직을 이용한 차량의 카메라 공간-운전자 시야 공간으로 변환하는 과정에 대한 교육 실시
  3). 임베디드 SW RUST 적용 선행 개발
  - Shared memory를 응용한 속도계 SW 개발
  - AUTOSAR Classic 시스템 크로스 컴파일을 통한 Rust모듈 개발 및 적용
  - Traveo T2G MCU 플랫폼에서의 작동 검증

2. 석사과정 중 중 경험 및 경력
 1). 자율 화재 초동 진압 체계 개발 연구
  a) 연구 목적 : 화재 발생 시 초기에 화원을 조준, 제압하여 무인 함정의 생존성 증대, 터널 등 접근이 어려운 구조물의 안전성 도모
  b) 연구 내용 : 
  - 카메라 교정 로직 및 다중 카메라를 이용한 화재의 3차원 위치 추정 로직 개발
  - 2400입방미터 이상 대규모 공간의 다중 카메라를 이용한 위치 추정 정확도 실험 및 검증 수행
  - YOLOv4모델 학습용 데이터셋 제작 및 이를 이용한 화재 감지 모델 학습 및 검증
  - 프로토 타입 HW(Raspberry Pi 4)에 적합한 딥 러닝 모델 포팅 및 온보드 모델 구동 검증
  - RGB+IR 복합 실시간 화재 감지용 CNN 모델 구성 및 학습/검증
  - NEON 가속 엔진을 활용한 이미지 연산시간 감축
  - C# 기반 .NET Framwork UI 제작.
  - Autodesk Inventor를 활용한 다중 카메라 센서 HW 제작(FLIR Letpon + RGB Camera)
 
 2). P&ID 도면 자동인식 SW 개발
  a) 연구 목적 : 도면 자동인식을 위한 인공지능 모델 적용 및 이미지 모폴로지 연산 및 변형 과정을 거쳐 도면의 선 및 글자 요소를 인식. 도면 내 계기 장비의 연결 관계 인식 및 데이터 반환 역할
  b) 연구 내용 : 
  - OCR 모델 간 도면 내 글자 인식 정확도 비교 및 검증
  - 도면 중간 분류 모델을 이용한 도면 영역 인식 SW 개발(Python)
  - 이미지 변환을 이용한 도면 내 영역, 구획, 선 인식 SW 개발(Python)
  - 도면 내 기호 인식을 위한 YOLOv5 모델 학습 및 데이터셋 제작

3. 발표 논문
Estimation of Indoor Pose of Multiple Cameras Using 3D Fiducial Markers(2021 함정기술 무기체계 세미나, 2021.06.11)
OCR엔진과 OpenCV를 이용한 P&ID 도면 Text, Network 인식(2022 한국 CDE 동계 학술대회, 2022.02.10)
Development of a Fire Location and Localization System for Ship Compartment Based On Machine Vision System(ICDM 2022, 2022.04.28)
객체 위치를 기반으로 한 P&ID 연결 정보 인식 연구(한국 CDE학회 논문집, 2022.12.01)
Rust를 적용한 차량 전장 시스템 및 SW 품질 개선 가능성에 관한 연구(2025 한국전자공학회 추계학술대회, 2024.11.22)
AUTOSAR Classic 플랫폼과 Rust 모듈의 병합 구현에 대한 연구(2025 한국 자동차공학회 춘계학술대회, 2025.05.21)


*
2. 목표를 달성하는 과정에서 힘들고 어려운 문제가 발생하였음에도 포기하지 않고 임무를 완수한 사례를 작성해주세요. -> 업무에 바로 쓰일 역량이 어려움 속에서 어떻게 검증됐는가
저는 팀과 함께 화재 감지·초동 진압 체계 연구과제를 성공적으로 수행해 2022년 올해의 10대 기계기술에 선정된 경험이 있습니다. 저는 화재 위치 추적과 통합 프로그램을 담당해 RGB/IR, IMU, 소화 노즐 I/O 등 여러 신호를 한 시스템으로 묶는 역할을 맡았습니다. 진행 중 두 가지 난관이 있었습니다.
첫째, 빠듯한 일정 대비 대규모 데이터셋이 필요했습니다.
저는 데이터 규모에 따른 모델 성능 변화를 수치로 정리해 팀을 설득했고, Ubuntu 서버에 LabelMe 기반 라벨링 환경을 구축해 다수 인원이 동시에 작업할 수 있는 환경을 만들었습니다. 그리고 라벨링 가이드를 만들어 배포하고 샘플을 만들어 이해를 도왔습니다. 여러 팀원들이 데이터셋을 만드는 과정을 도와주어 시간을 많이 절약할 수 있었고 화재에 대해 mAP@[0.5:0.95]=0.97의 정확도를 갖는 객체 탐지 모델을 만들어낼 수 있었습니다.
둘째, 코드가 USB와 메일로 수기 배포되며 수정 부분이 각자 달라 충돌과 중복 수정이 잦았습니다.
저는 문제 해결을 위해 Git 저장소를 만들었고 팀원들에게 이를 사용함으로써 버전 관리 및 수정내역의 기록, 열람, 복구 등을 손쉽게 할 수 있다는 점을 설명했습니다. 세미나를 진행해 Git에 대한 간략한 실습을 해 손쉽게 사용하도록 도움을 주었습니다. 또한 Github Actions로 CI를 구현하여 이를 통해 안정적인 SW 개발이 가능하도록 도울 수 있었습니다. 그리고 기능을 모듈별로 구분하고 객체지향 구조로 리팩터링하여 각 기능 개발자들이 손쉽게 개발, 병합을 수행할 수 있도록 하였습니다.
이 과정을 통해 과제의 진척도를 앞당길 수 있었고 시스템의 오류 또한 현저히 줄일 수 있었습니다. 최종 시험 평가에서 가로 13.4m, 세로 23.4m, 높이 8.2m 영역 내 화재 감지율 100%, 화재 소화율 100%를 달성하여 뿌듯함을 느꼈던 경험이었습니다.


저는 체계통합 및 시스템 GUI 개발에 참여한 경험이 있습니다. 이 과정에서 새로운 방안을 제안했고 이 제안을 존중하고 협업한 팀원들 덕분에 성공적으로 과제를 마칠 수 있었습니다. 본 업무는 GUI를 개발하며 여러 기관들이 개발한 코드를 하나로 통합하는 것이 핵심이었습니다. 통합 프로그램은 화재감지센서의 RGB, IR 데이터, IMU 신호 처리와 소화 노즐의 입출력기능 등, 여러 신호 처리가 요구되었습니다. 여러 연구원이 하나의 통합 시스템을 위해 개발하면서 문제가 발생했습니다. 연구원 혹은 기관 간에 메일 또는 USB를 이용해 소스코드를 전달하는 일이 잦았습니다. 이 과정에서 개발중인 코드의 버전관리와 최신화가 되지 않아 시간낭비가 발생했습니다. 각자 진행한 연구내용을 임의로 통합, 변경하여 코드의 구성이 복잡해지고 참여기관 간에 충돌하는 일도 많았기에 해결이 필요한 문제였습니다. 저는 이 문제를 효과적으로 해결하고자 두가지를 제안했습니다. 첫번째로 연구기관들에 git을 사용하는 것을 제안했습니다. 다른 연구기관의 실무자들이 git에 대해 어려움을 느꼈지만 git을 사용함으로써 버전관리 및 수정내역의 기록, 열람, 복구 등을 손쉽게 할 수 있다는 점을 설명했고 세미나를 진행해 git에 대한 간략한 실습을 해 손쉽게 사용하도록 도움을 주었습니다. 두번째로는 연구원들이 C#의 객체 지향 코드 작성에 어려움을 겪는 경우가 있어 프로젝트의 내용을 각 담당부문으로 분할하고 및 각 부문의 구조체 구성을 하였습니다. 이를 통해 각자 수정할 부분에 손쉽게 접근하도록 하여 한 사람이 다른 사람의 코드를 수정하는 일이 없도록 할 수 있었고 빠른 프로그램 통합을 이뤄낼 수 있었습니다. 저의 제안에 따라준 연구기관들의 노력 덕분에 불필요한 시간낭비를 줄여 늦지 않도록 프로그램을 완성했고 과제를 성공적 마칠 수 있었습니다. 본 연구 과제를 수행하며 공동의 목표를 달성하기 위해 협의하는 과정을 배웠고 이를 통해 함께 노력하여 목표를 달성하는 동료애와 성취감을 느낄 수 있었습니다.


성적이 모자랐는데 열심히 따라가서 해결했던 것(기존작성내용) -> 자동차 관련 업무를 수행하기 위해 했던 행동들로 현재도 자동차 관련 회사에 다니면서 즐겁게 일하는 것을 작성.


회사에서 연구 진행 중에 암 투병으로 인해 자리를 비워야 했지만 재택근무 및 회사의 배려로 충분한 결과를 도출할 수 있었던 것(건강관리에 문제가 있다 볼 수 있어서 안좋을듯)
플래싱 장비 부족으로 openocd/miniprog이용해서 플래싱 툴 만들고 이를 응용해서 라인에서 PCB 초기화 및 프로그래밍 활용한 과정
화재감지체계에서 개발시간 너무 늘어진것을 여기에 작성해도 좋을듯?
사내 딥러닝 활용방안 관련하여 어려움이 있을 때 관련된 5회차 강의 및 colab 실습예제를 통해 딥러닝에 대한 활용도가 높아지고 불량률을 낮출 수 있었던 것.



3. 공동의 목표를 달성하기 위해 다른 사람들과 힘을 합쳐 노력했던 경험을 구체적으로 기술하고, 그 경험을 통해 배운 점을 작성해주세요.


사내 딥러닝 활용방안 관련하여 어려움이 있을 때 관련된 5회차 강의 및 colab 실습예제를 통해 딥러닝에 대한 활용도가 높아지고 불량률을 낮출 수 있었던 것.
플래싱 장비 부족으로 openocd/miniprog이용해서 플래싱 툴 만들고 이를 응용해서 라인에서 PCB 초기화 및 프로그래밍 활용한 과정(인티그레이터분들이랑 협업했던 내용을 주로 응용)


B안) OpenOCD/MiniProg 기반 플래싱 툴로 개발·라인 병목 해소(인티그레이터 협업)

개발 단계에서 프로그래밍 전용 고가의 디버거를 두개 번갈아가며 업데이트 해야 했고 수량이 적어 개발자들이 개발 후 작동 확인이 어려웠고 SW 테스터 또한 샘플을 여러번 업데이트해야 했으나 일정이 지연되는 일이 다반사였습니다.
저는 인티그레이터 동료들과 전용 디버거의 의존도를 낮추고 리드 타임을 줄일 수 있는 방법을 찾아보았습니다. SW 디버깅 용도로 개발자들이 각자 가지고 있던 저렴한 디버거인 MiniProg4를 사용할 수 있겠다는 생각이 들었습니다. 
Infineon에서는 OpenOCD에 사용할 수 있는 자사 칩의 기본 프로파일을 제공해주고 있었고 MiniProg4는 MCU의 Code Flash, Supervisory Flash, Work Flash를 기록할 수 있었습니다. 용량이 큰 리소스의 경우 NAND 기록용 SW를 프로그래밍하고 디버거를 연결하여 PC-MCU-NAND에 기록하는 순서를 갖고 있었는데 MiniProg4 또한 디버깅이 가능했으므로 이러한 작업을 자동화할 수 있겠다는 생각이 들었습니다. 저는 파이썬 스크립트를 작성하여 arm-gbd와 OpenOCD간 동기화 동작을 구현하였고 디버거 반환결과를 읽어 플래싱 과정을 전부 자동화하도록 구현하였습니다.
인티그레이터 직무를 가진 동료들이 기존 디버거와 MiniProg4 디버거를 이용해 프로그래밍한 샘플을 검증해 주었으며 빌드 스크립트에서 MiniProg 스크립트를 포함하여 개발자들이 손쉽게 사용할 수 있도록 했습니다. 
SW 테스터 또한 손쉽게 업데이트를 수행하여 SW 릴리즈 이후 검증기간이 짧아져 리드타임을 감축시킬 수 있었습니다.
이 경험을 통해...


대기가 길고 병렬 검증이 어려웠고, 생산 라인에서도 보드 초기화·프로그램이 병목이었습니다. 저는 R&D·생산·인티그레이터와 “장비 의존도를 낮추고, 누구나 동일 절차로 대량 플래싱”을 공동 목표로 삼아 OpenOCD/MiniProg 기반 플래싱 툴을 설계·배포했습니다. 보드별 전원·리셋·핀맵을 ICD로 표준화하고, CMake/배치 스크립트로 빌드 산출물→서명/CRC→다운로드→검증→리부트까지 원클릭 파이프라인을 만들었습니다. 생산 요구에 맞춰 시리얼/캘리브레이션 주입, 리트라이/리커버리 플로우, **표준 로그(시간·장치·리턴코드)**를 추가했고, 인티그레이터와는 지그 전원 시퀀스·USB 노이즈 대응을 맞춰 다포트 병렬 플래싱을 안정화했습니다. 배포는 Git 단일 저장소와 릴리스 태깅으로 버전 혼선을 막고, 간이 GUI/CLI, SOP와 짧은 교육 영상을 제공해 현장 안착을 도왔습니다. 이후 로그 자동 수집 대시보드로 실패 패턴을 조기 포착하고, 설정은 환경변수/ini로 분리해 외주 라인도 같은 절차를 적용했습니다. 결과적으로 개발팀은 프로브 없이도 병렬 검증이 가능해 회귀 속도가 빨라졌고, 라인은 초기화·프로그램 병목 해소로 회전율이 개선되었습니다. 이 경험을 통해 인터페이스·프로세스·툴을 표준화하고, 여러 팀을 데이터와 절차로 정렬시키면 조직 전체의 속도와 품질을 동시에 끌어올릴 수 있음을 배웠습니다.