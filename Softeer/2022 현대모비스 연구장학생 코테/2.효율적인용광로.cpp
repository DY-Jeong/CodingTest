// ## **효율적인 전기로 운영 전략**

// **제한시간 : C/C++/Java/Python(2초)| 메모리 제한 : 256MB**

// 현대자동차그룹은 충남 당진공장에 자동차에 들어가는 철을 만들기 위한 전기로를 보유하고 있다. 전기로란 전기가 발생하는 열로 금속을 녹여 정련하는 용광로를 의미하는데, 당진공장에는 1에서 N사이의 번호가 붙은 N개의 전기로가 있다. 이 전기로들은 초기 0도에서 시작하여, 1초마다 모든 전기로가 1도씩 온도가 올라간다.담당 엔지니어는 1초마다 하나의 전기로를 제어 할 수 있고, 제어된 전기로는 온도가 올라가지 않고 현재의 온도를 유지한다. 전기로 운영이 T초 동안 진행되고, 운영 종료 후 온도가 H보다 낮은 전기로는 효율적으로 운영된 것으로 판단한다.i번째 컨트롤을 통해 Ai번 전기로를 제어 한다고 했을 때, 운영이 끝나고 각각의 전기로가 효율적으로 운영되었는지 판별하라.

// **입력형식**

// 첫 번째 줄에 전기로의 개수 N, 제한 온도 H, 전기로운영시간 T가 주어진다.다음 T개의 줄의 i번째 줄에는 정수 Ai가 주어진다.입력은 다음과 같은 조건을 만족한다.   2≤N≤10^5   1≤H≤10^9   1≤T≤10^5   1≤A_{i}≤N

// **출력형식**

// i번째 줄에 i번 전기로가 효율적으로 운영되었다면 “Yes”를, 그렇지 않으면 “No”를 출력한다.

// **입력예제1**

// ```
// 4 3 5
// 1 1 2 2 1
// ```

// **출력예제2**

// ```
// Yes
// No
// No
// No
// ```

// **입력예제2**

// ```
// 5 3 3
// 4 2 1
// ```

// **출력예제2**

// ```
// Yes
// Yes
// No
// Yes
// No
// ```

// **추가설명**

// 입출력 예제 1을 그림으로 설명하면 다음과 같다. 4개의 전기로에 대해 5초 동안 온도가 1도씩 올라가는데 1초 단위로 제어를 하게되는 전기로는 온도가 상승하지 않는다. 5초 후 온도가 3보다 작은 용광로는 첫번째 용광로 뿐이며, 첫번째 용광로가 효율적으로 운영되었다고 판단할 수 있다.


#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main(int argc, char** argv)
{
	//std::ios::sync_with_stdio(false);
	//입출력 버퍼 동기화c, c++버퍼 동기화 해제
	//이건 cin, cout만 사용할 수 있음!
	int n, h, t, a;
	int arr[100001]={};
	cin>>n>>h>>t;
	for(int i=1; i<=t; i++)
	{
		cin>>a;
		arr[a]+=1;
	}
	for(int i=1; i<=n; i++)
	{
		if(h>t-arr[i]) cout<<"Yes\n";
		else cout<<"No\n";
	}
	return 0;
}
